plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'io.freefair.lombok' version '6.6.1'
    id 'jacoco'
}

group = 'com.fitwsarah'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

ext {
    mapstructVersion = "1.5.3.Final"
    lombokVersion = "1.18.26"
    lombokMapstructBindingVersion = "0.2.0"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}",
            "org.projectlombok:lombok:${lombokVersion}",
            "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    implementation 'mysql:mysql-connector-java:8.0.33'


    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.yaml:snakeyaml:2.2'
    testImplementation 'org.yaml:snakeyaml:2.2'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'com.squareup.okhttp3:okhttp:4.11.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.11.0'

}

jacoco{
    toolVersion = "0.8.8"
}


jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
//"com/movielister/**/MovieDetailsServiceApplication.class",
// "**/*MapperImpl.class"
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.00
            }
        }
    }
}

test.finalizedBy jacocoTestReport
check.dependsOn

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }

}
